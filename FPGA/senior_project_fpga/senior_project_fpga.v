
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module senior_project_fpga(
//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// Accelerometer and EEPROM //////////
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// 2x13 GPIO Header //////////
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire reset; //reset input
wire D[15:0]; //data lines
wire DMARQ; //dma request
wire CD_EMPH; //CD empty status output
wire RD; //read select
wire DMACK; //dma acknowledge
wire DA[2:0]; //select stuff for ATA bus
wire CS[1:0]; //chip select
wire CD_BCLK; //one of the CD clocks (1.41MHz)
wire CD_SD; //CD serial data in
wire DOOR_OPEN; //status for disc lid (1 = open)
wire WR; //write select
wire IORDY; //this could be the busy line (accoding to dc.gif this is an input (to dc) so that assumption seems reasonable)
wire INTRQ; //interrupt request
wire CD_LRCLK; //another CD clock (44.1KHz)
wire CDDA_CLK; //YET another CD clock (33.8688MHz)


//=======================================================
//  Structural coding
//=======================================================

//A side of the bus, lowest to highest
assign reset = GPIO_0[0];

assign D[7] = GPIO_0[2];
assign D[8] = GPIO_0[4];
assign D[5] = GPIO_0[6];
assign D[10] = GPIO_0[8];

assign D[3] = GPIO_0[10];
assign D[12] = GPIO_0[12];
assign D[1] = GPIO_0[14];
assign D[14] = GPIO_0[16];

assign DMARQ = GPIO_0[18];
assign RD = GPIO_0[20];
assign DMACK = GPIO_0[22];
assign CD_EMPH = GPIO_0[23];

assign DA[0] = GPIO_0[26];
assign CS[0] = GPIO_0[28];

assign CD_BCLK = GPIO_0[30];
assign CD_SD = GPIO_0[31];

//B side of the bus
assign DOOR_OPEN = GPIO_0[33];

assign D[6] = GPIO_0[1];
assign D[9] = GPIO_0[3];
assign D[4] = GPIO_0[5];
assign D[11] = GPIO_0[7];

assign D[2] = GPIO_0[9];
assign D[13] = GPIO_0[11];
assign D[0] = GPIO_0[13];
assign D[15] = GPIO_0[15];

assign WR = GPIO_0[17];
assign IORDY = GPIO_0[19];
assign INTRQ = GPIO_0[21];
assign DA[1] = GPIO_0[24];

assign DA[2] = GPIO_0[25];
assign CS[1] = GPIO_0[27];

assign CD_LRCLK = GPIO_0[29];
assign CDDA_CLK = GPIO_0[32];

//this one is too fast for a clock divider; needs PLL
cdda_clk sonic_d_hedgehog(.inclk0(CLOCK_50), .c0(CDDA_CLK));
cd_bclk sonic_b_hedgehog(.inclk0(CLOCK_50), .c0(CD_BCLK));
cd_lrclk sonic_e_hedgehog(.inclk0(CLOCK_50), .c0(CD_LRCLK));
//using a PLL for all of them gets more accurate results in the end


endmodule
